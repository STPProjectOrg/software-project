name: Continuous Integration and Delivery

on: [push]

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web

jobs:
  tests:
      if: ${{ github.event.workflow_run.head_branch }} == 'main'
      name: Run Tests
      runs-on: ubuntu-latest
      strategy:
        max-parallel: 4
        matrix:
          python-version: [3.11]
          django-version: [4.1.3]

      steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "Django~=${{ matrix.django-version }}.0"
      - name: Setup Tests
        run: |
          echo "$(python --version) / Django $(django-admin --version)"
      - name: Community App Tests
        run: |
          cd app
          python manage.py test community_app
      #- name: Dashboard App Tests
      #  run: |
      #    cd app
      #    python manage.py test dashboard_app
      - name: Messaging App Tests
        run: |
          cd app
          python manage.py test messaging_app
      # Schmeißt Fehler wegen DB api_app_asset, obwohl keine Tests vorhanden sind
      #- name: Notification App Tests
      #  run: |
      #    cd app
      #    python manage.py test notification_app
      - name: Settings App Tests
        run: |
          cd app
          python manage.py test settings_app
      # Schmeißt Fehler wegen DB api_app_asset
      #- name: User App Tests
      #  run: |
      #    cd app
      #    python manage.py test user_app

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
          echo "DEBUG=0" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "SQL_ENGINE=django.db.backends.postgresql_psycopg2" >> .env
          echo "DATABASE=postgres" >> .env
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> .env
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL: ${{ secrets.PERSONAL }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}

  deploy:
    name: Deploy to Linode
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
          echo "DEBUG=0" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "WEB_IMAGE=${{ env.WEB_IMAGE }}" >> .env
          echo "NAMESPACE=${{ secrets.NAMESPACE }}" >> .env
          echo "PERSONAL=${{ secrets.PERSONAL }}" >> .env
          echo "SQL_ENGINE=django.db.backends.postgresql_psycopg2" >> .env
          echo "DATABASE=postgres" >> .env
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> .env
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Linode
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.LINODE_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL
            docker pull $WEB_IMAGE
            sudo docker-compose -f docker-compose.prod.yml up -d
          ENDSSH
